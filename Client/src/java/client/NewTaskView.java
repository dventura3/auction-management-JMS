/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * NewTaskView.java
 *
 * Created on 22-nov-2010, 17.30.41
 */

package client;

import org.dto.TaskDescriptor;
import org.dto.TaskTYPE;
import org.dto.OSTYPE;
import java.io.File;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Enumeration;
import javax.swing.DefaultListModel;
import javax.swing.InputVerifier;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import org.jdesktop.application.Action;

/**
 *Create New Task to insert into Workflow
 * @author LuigiXIV, Daniela, Marcx87
 */
public class NewTaskView extends javax.swing.JFrame {
    
    public TaskDescriptor td;
    public org.dto.Workflow workflow;
    private DefaultListModel model;
    private DefaultListModel modelInputs = new DefaultListModel();
    private DefaultListModel modelOutputs = new DefaultListModel();
    private String taskType = null;
    private String taskCommand = null;
    private String taskCPU = null;
    private String taskRAM = null;
    private String taskSpace = null;
    private String taskOS = null;
    private ArrayList<String> inputsCollection;
    private ArrayList<String> outputsCollection;
    /** Creates new form NewTaskView */
    public NewTaskView(org.dto.Workflow workflow, DefaultListModel model) {
        //super(MiddlewareMain.getApplication().getMainFrame(),true);
        initComponents();
        this.workflow = workflow;
        this.model = model;
        this.inputsCollection = new ArrayList<String>();
        this.outputsCollection = new ArrayList<String>();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        Command = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        CPURequired = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        RamRequired = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        SpaceRequired = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        Inputs = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        Outputs = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        validationLabelCPU = new javax.swing.JLabel();
        validationLabelRAM = new javax.swing.JLabel();
        validationLabelSpace = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance().getContext().getResourceMap(NewTaskView.class);
        setTitle(resourceMap.getString("Form.title")); // NOI18N
        setName("Form"); // NOI18N
        setResizable(false);

        jPanel1.setBackground(resourceMap.getColor("jPanel1.background")); // NOI18N
        jPanel1.setName("jPanel1"); // NOI18N
        jPanel1.setPreferredSize(new java.awt.Dimension(200, 200));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setForeground(resourceMap.getColor("jLabel2.foreground")); // NOI18N
        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 15, -1, -1));

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String []{TaskTYPE.Executable.toString(), TaskTYPE.scriptBash.toString()}));
        jComboBox1.setName("jComboBox1"); // NOI18N
        jComboBox1.setPreferredSize(new java.awt.Dimension(155, 25));
        jPanel1.add(jComboBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(105, 14, -1, -1));

        jLabel2.setForeground(resourceMap.getColor("jLabel2.foreground")); // NOI18N
        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 65, -1, -1));

        Command.setText(resourceMap.getString("TaskCommand.text")); // NOI18N
        Command.setToolTipText(resourceMap.getString("TaskCommand.toolTipText")); // NOI18N
        Command.setName("TaskCommand"); // NOI18N
        Command.setPreferredSize(new java.awt.Dimension(155, 25));
        jPanel1.add(Command, new org.netbeans.lib.awtextra.AbsoluteConstraints(105, 65, -1, -1));

        jLabel3.setForeground(resourceMap.getColor("jLabel2.foreground")); // NOI18N
        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 115, -1, -1));

        CPURequired.setText(resourceMap.getString("CPURequired.text")); // NOI18N
        CPURequired.setToolTipText(resourceMap.getString("CPURequired.toolTipText")); // NOI18N
        CPURequired.setInputVerifier(new IntegerVerifier());
        CPURequired.setName("CPURequired"); // NOI18N
        CPURequired.setPreferredSize(new java.awt.Dimension(155, 25));
        jPanel1.add(CPURequired, new org.netbeans.lib.awtextra.AbsoluteConstraints(105, 115, -1, -1));

        jLabel4.setForeground(resourceMap.getColor("jLabel4.foreground")); // NOI18N
        jLabel4.setText(resourceMap.getString("jLabel4.text")); // NOI18N
        jLabel4.setName("jLabel4"); // NOI18N
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 165, -1, -1));

        RamRequired.setToolTipText(resourceMap.getString("RAMRequired.toolTipText")); // NOI18N
        RamRequired.setInputVerifier(new IntegerVerifier());
        RamRequired.setName("RAMRequired"); // NOI18N
        RamRequired.setPreferredSize(new java.awt.Dimension(155, 25));
        jPanel1.add(RamRequired, new org.netbeans.lib.awtextra.AbsoluteConstraints(105, 165, -1, -1));

        jLabel5.setForeground(resourceMap.getColor("jLabel5.foreground")); // NOI18N
        jLabel5.setText(resourceMap.getString("jLabel5.text")); // NOI18N
        jLabel5.setName("jLabel5"); // NOI18N
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 215, -1, -1));

        SpaceRequired.setToolTipText(resourceMap.getString("SpaceRequired.toolTipText")); // NOI18N
        SpaceRequired.setInputVerifier(new IntegerVerifier());
        SpaceRequired.setName("SpaceRequired"); // NOI18N
        SpaceRequired.setPreferredSize(new java.awt.Dimension(155, 25));
        jPanel1.add(SpaceRequired, new org.netbeans.lib.awtextra.AbsoluteConstraints(105, 215, -1, -1));

        jLabel6.setForeground(resourceMap.getColor("jLabel6.foreground")); // NOI18N
        jLabel6.setText(resourceMap.getString("jLabel6.text")); // NOI18N
        jLabel6.setName("jLabel6"); // NOI18N
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 265, -1, -1));

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String []{OSTYPE.WindowsXP.toString(), OSTYPE.WindowsVista.toString(), OSTYPE.Windows7.toString(), OSTYPE.Unix.toString()}));
        jComboBox2.setName("jComboBox2"); // NOI18N
        jComboBox2.setPreferredSize(new java.awt.Dimension(155, 25));
        jPanel1.add(jComboBox2, new org.netbeans.lib.awtextra.AbsoluteConstraints(105, 265, -1, -1));

        jLabel7.setForeground(resourceMap.getColor("jLabel7.foreground")); // NOI18N
        jLabel7.setText(resourceMap.getString("jLabel7.text")); // NOI18N
        jLabel7.setName("jLabel7"); // NOI18N
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 15, -1, -1));

        Inputs.setMinimumSize(new java.awt.Dimension(100, 80));
        Inputs.setName("Inputs"); // NOI18N
        Inputs.setPreferredSize(new java.awt.Dimension(300, 100));

        jList1.setModel(modelInputs);
        jList1.setName("jList1"); // NOI18N
        jList1.setPreferredSize(new java.awt.Dimension(45, 45));
        jList1.setVisibleRowCount(5);
        Inputs.setViewportView(jList1);

        jPanel1.add(Inputs, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 15, -1, -1));

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance().getContext().getActionMap(NewTaskView.class, this);
        jButton4.setAction(actionMap.get("OpenFile")); // NOI18N
        jButton4.setText(resourceMap.getString("jButton4.text")); // NOI18N
        jButton4.setToolTipText(resourceMap.getString("jButton4.toolTipText")); // NOI18N
        jButton4.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton4.setMaximumSize(new java.awt.Dimension(59, 20));
        jButton4.setMinimumSize(new java.awt.Dimension(59, 20));
        jButton4.setName("jButton4"); // NOI18N
        jButton4.setPreferredSize(new java.awt.Dimension(80, 30));
        jPanel1.add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 122, -1, -1));

        jButton5.setAction(actionMap.get("RemoveInput")); // NOI18N
        jButton5.setText(resourceMap.getString("jButton5.text")); // NOI18N
        jButton5.setName("jButton5"); // NOI18N
        jButton5.setPreferredSize(new java.awt.Dimension(80, 30));
        jPanel1.add(jButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 122, -1, -1));

        jLabel8.setForeground(resourceMap.getColor("jLabel8.foreground")); // NOI18N
        jLabel8.setText(resourceMap.getString("jLabel8.text")); // NOI18N
        jLabel8.setName("jLabel8"); // NOI18N
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 165, -1, -1));

        Outputs.setMinimumSize(new java.awt.Dimension(100, 80));
        Outputs.setName("Outputs"); // NOI18N
        Outputs.setPreferredSize(new java.awt.Dimension(300, 100));

        jList2.setModel(modelOutputs);
        jList2.setName("jList2"); // NOI18N
        jList2.setVisibleRowCount(5);
        Outputs.setViewportView(jList2);

        jPanel1.add(Outputs, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 165, -1, -1));

        jButton6.setAction(actionMap.get("NewOutputFile")); // NOI18N
        jButton6.setText(resourceMap.getString("jButton6.text")); // NOI18N
        jButton6.setToolTipText(resourceMap.getString("jButton6.toolTipText")); // NOI18N
        jButton6.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton6.setMaximumSize(new java.awt.Dimension(59, 20));
        jButton6.setMinimumSize(new java.awt.Dimension(59, 20));
        jButton6.setName("jButton6"); // NOI18N
        jButton6.setPreferredSize(new java.awt.Dimension(80, 30));
        jPanel1.add(jButton6, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 272, -1, -1));

        jButton7.setAction(actionMap.get("RemoveOutput")); // NOI18N
        jButton7.setText(resourceMap.getString("jButton7.text")); // NOI18N
        jButton7.setName("jButton7"); // NOI18N
        jButton7.setPreferredSize(new java.awt.Dimension(80, 30));
        jPanel1.add(jButton7, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 272, -1, -1));

        jButton1.setAction(actionMap.get("createNewTask")); // NOI18N
        jButton1.setText(resourceMap.getString("jButton1.text")); // NOI18N
        jButton1.setToolTipText(resourceMap.getString("jButton1.toolTipText")); // NOI18N
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton1.setName("jButton1"); // NOI18N
        jButton1.setPreferredSize(new java.awt.Dimension(100, 40));
        jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 330, -1, -1));

        jButton2.setAction(actionMap.get("Close")); // NOI18N
        jButton2.setText(resourceMap.getString("jButton2.text")); // NOI18N
        jButton2.setToolTipText(resourceMap.getString("jButton2.toolTipText")); // NOI18N
        jButton2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton2.setName("jButton2"); // NOI18N
        jButton2.setPreferredSize(new java.awt.Dimension(100, 40));
        jPanel1.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 330, -1, -1));

        validationLabelCPU.setFont(resourceMap.getFont("validationLabelCPU.font")); // NOI18N
        validationLabelCPU.setForeground(resourceMap.getColor("validationLabelCPU.foreground")); // NOI18N
        validationLabelCPU.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        validationLabelCPU.setText(resourceMap.getString("validationLabelCPU.text")); // NOI18N
        validationLabelCPU.setFocusable(false);
        validationLabelCPU.setName("validationLabelCPU"); // NOI18N
        validationLabelCPU.setPreferredSize(new java.awt.Dimension(230, 20));
        jPanel1.add(validationLabelCPU, new org.netbeans.lib.awtextra.AbsoluteConstraints(65, 95, -1, -1));

        validationLabelRAM.setFont(resourceMap.getFont("validationLabelCPU.font")); // NOI18N
        validationLabelRAM.setForeground(resourceMap.getColor("validationLabelRAM.foreground")); // NOI18N
        validationLabelRAM.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        validationLabelRAM.setText(resourceMap.getString("validationLabelCPU.text")); // NOI18N
        validationLabelRAM.setFocusable(false);
        validationLabelRAM.setName("validationLabelRAM"); // NOI18N
        validationLabelRAM.setPreferredSize(new java.awt.Dimension(230, 20));
        jPanel1.add(validationLabelRAM, new org.netbeans.lib.awtextra.AbsoluteConstraints(65, 145, -1, -1));

        validationLabelSpace.setFont(resourceMap.getFont("validationLabelCPU.font")); // NOI18N
        validationLabelSpace.setForeground(resourceMap.getColor("validationLabelSpace.foreground")); // NOI18N
        validationLabelSpace.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        validationLabelSpace.setText(resourceMap.getString("validationLabelCPU.text")); // NOI18N
        validationLabelSpace.setFocusable(false);
        validationLabelSpace.setName("validationLabelSpace"); // NOI18N
        validationLabelSpace.setPreferredSize(new java.awt.Dimension(230, 20));
        jPanel1.add(validationLabelSpace, new org.netbeans.lib.awtextra.AbsoluteConstraints(65, 195, -1, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 659, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 393, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * This method is called when Button Ok is cliked, it create new TaskDescriptor with
     * the specified fields typed in TextFields and ComboBox
     */
    @Action
    public void createNewTask() {
        System.out.println("Sono in createNewTask");
        taskType = this.jComboBox1.getSelectedItem().toString();
        System.out.println("TaskType: " + taskType);
        taskCommand = this.Command.getText();
        System.out.println("TaskCommand: " + taskCommand);
        taskCPU = this.CPURequired.getText();
        System.out.println("TaskCPU: " + taskCPU);
        taskRAM = this.RamRequired.getText();
        taskSpace = this.SpaceRequired.getText();
        taskOS = this.jComboBox2.getSelectedItem().toString();
        System.out.println("TaskOS: " + taskOS);
        if(taskCommand!=null &&
                taskCPU!=null &&
                taskRAM!=null && 
                taskSpace!=null && 
                taskCommand.length() > 0 &&
                taskCPU.length() > 0 &&
                taskRAM.length() > 0 &&
                taskSpace.length() > 0 &&
                !modelInputs.isEmpty())
        {
            this.td = new TaskDescriptor();
            System.out.println("Task td creato");
            if(this.jComboBox1.getSelectedItem().equals(TaskTYPE.Executable.toString()))
                this.td.setType(TaskTYPE.Executable);
            else
                this.td.setType(TaskTYPE.scriptBash);

            if(taskOS.equals(OSTYPE.Unix.toString()))
                this.td.setOperantingSystemRequired(OSTYPE.Unix);
            else if(taskOS.equals(OSTYPE.Windows7.toString()))
                this.td.setOperantingSystemRequired(OSTYPE.Windows7);
            else if(taskOS.equals(OSTYPE.WindowsVista.toString()))
                this.td.setOperantingSystemRequired(OSTYPE.WindowsVista);
            else
                this.td.setOperantingSystemRequired(OSTYPE.WindowsXP);

            this.td.setCommand(taskCommand);
            this.td.setCpuRequired(Integer.parseInt(taskCPU));
            this.td.setRamRequired(Integer.parseInt(taskRAM));
            this.td.setSpaceRequired(Integer.parseInt(taskSpace));

            for(int i = 0; i < modelInputs.size(); i++){
                this.inputsCollection.add(String.valueOf(modelInputs.get(i)));
            }
            this.td.setInputs(inputsCollection);

//            for(int i = 0; i < this.td.getInputs().size(); i++ ){
//                System.out.println("Input " + i + ": " + this.td.getInputs().get(i));
//            }

            for(int i = 0; i < modelOutputs.size(); i++){
                this.outputsCollection.add(String.valueOf(modelOutputs.get(i)));
            }
            this.td.setOutputs(outputsCollection);

            int err = workflow.addTask(td);
            if(err == -1)
            {
                 JOptionPane.showMessageDialog(this,
                   "Errore nell'inserimento del nuovo task",
                   "Error",
                   JOptionPane.ERROR_MESSAGE);
            }
            else
            {
                String visualTd = String.valueOf(td.getID()) +
                        " - Type: " + taskType +
                        " - Command: " +  td.getCommand() +
                        " - CPU: " + String.valueOf(td.getCpuRequired()) +
                        " - Ram: " + String.valueOf(td.getRamRequired()) +
                        " - Space: " + String.valueOf(td.getSpaceRequired());
                model.addElement(visualTd);
                this.dispose();
            }
        }
        else
        {
           JOptionPane.showMessageDialog(this,
                   "Riempire tutti i campi",
                   "Error",
                   JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * This method Close the window, and it is called when Cancel button is pressed
     */
    @Action
    public void Close() {
        this.dispose();
    }

    @Action
    public void OpenFile() {
        JFileChooser fileChooser = new JFileChooser();
        int n = fileChooser.showOpenDialog(this);
        if (n == JFileChooser.APPROVE_OPTION)
        {
            File f = fileChooser.getSelectedFile();
            if (f !=null)
            {
                this.modelInputs.addElement(f.getPath());
            }
        }
    }

    @Action
    public void RemoveInput() {
        int[] input = this.jList1.getSelectedIndices();
        if(input != null){
            for (int i=0;i<input.length;i++){
                this.modelInputs.remove(input[i]);
            }
        }
    }

    @Action
    public void RemoveOutput() {
        int[] output = this.jList2.getSelectedIndices();
        if(output != null){
            for (int i=0;i<output.length;i++){
                this.modelOutputs.remove(output[i]);
            }
        }
    }

    @Action
    public void NewOutputFile() {
        String response = JOptionPane.showInputDialog(null,
            "Inserire nome del file di output",
            "File:",
            JOptionPane.PLAIN_MESSAGE);
        if (response!=null){
            this.modelOutputs.addElement(response);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField CPURequired;
    private javax.swing.JTextField Command;
    private javax.swing.JScrollPane Inputs;
    private javax.swing.JScrollPane Outputs;
    private javax.swing.JTextField RamRequired;
    private javax.swing.JTextField SpaceRequired;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JList jList1;
    private javax.swing.JList jList2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel validationLabelCPU;
    private javax.swing.JLabel validationLabelRAM;
    private javax.swing.JLabel validationLabelSpace;
    // End of variables declaration//GEN-END:variables

    private class IntegerVerifier extends InputVerifier {
        @Override
        public boolean verify(JComponent input) {
            int value = 0;
            JTextField tf = (JTextField) input;
            try{
                value = Integer.parseInt(tf.getText());
                if(tf.getName().equals("CPURequired"))
                {
                    validationLabelCPU.setText("");
                }
                else if(tf.getName().equals("RAMRequired"))
                {
                    validationLabelRAM.setText("");
                }
                else
                    validationLabelSpace.setText("");
                if(value>0){
                    return true;
                }
                else{
                    if(tf.getName().equals("CPURequired"))
                    {
                        CPURequired.setText("");
                        validationLabelCPU.setText("Il campo deve essere maggiore di zero");
                    }
                    else if(tf.getName().equals("RAMRequired"))
                    {
                        RamRequired.setText("");
                        validationLabelRAM.setText("Il campo deve essere maggiore di zero");
                    }
                    else
                    {
                        SpaceRequired.setText("");
                        validationLabelSpace.setText("Il campo deve essere maggiore di zero");
                    }
                    return false;
                }
            }
            catch(NumberFormatException e){
                if(tf.getName().equals("CPURequired"))
                {
                    validationLabelCPU.setText("Il campo deve contenere interi");
                    CPURequired.setText("");
                }
                else if(tf.getName().equals("RAMRequired"))
                {
                    validationLabelRAM.setText("Il campo deve contenere interi");
                    RamRequired.setText("");
                }
                else
                {
                    validationLabelSpace.setText("Il campo deve contenere interi");
                    SpaceRequired.setText("");
                }
                return false;
            }
        }
     }
}
